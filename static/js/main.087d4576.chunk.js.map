{"version":3,"sources":["components/ReadOnly.js","components/OneWayBinding.js","components/TwoWayBinding.js","components/Ajax.js","components/Methods.js","components/Events.js","components/ConditionalRendering.js","components/Registermethod.js","App.js","index.js"],"names":["ReadOnly","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","datastore","state","theme","handleThemeChange","bind","assertThisInitialized","refs","firstGrid","setData","e","setState","target","value","react_default","a","createElement","ref","caption","index","header","onChange","Component","OneWayBinding","breed","name","pagerOn","captionText","dataIndex","stringData","cInput","grid","handleTextareaChange","handlePagerChange","handleCaptionChange","handleChangeData","stringifyData","JSON","stringify","newDataIndex","checked","data","pager","page-size","page-size-options","cols","rows","htmlFor","id","type","onClick","placeholder","TwoWayBinding","handleDataChange","demoGrid","addEventListener","dataChanged","dataInsert","dataDelete","console","log","detail","rowIndex","ZGData","newValues","toConsumableArray","push","recordIndex","nOriginalIndex","filter","ele","parse","context-menu","editor","editor-controls","layout-controls","search","sorter","Ajax","json","undefined","_this2","loading","_this3","fetch","then","res","result","setTimeout","shows","error","Methods","handleEvent","event","cText","selected","textarea","setPager","setCaption","input","ta","Events","ZGTarget","eventText","concat","localName","eventLog","innerHTML","className","events","i","length","ConditionalRendering","json2","defaultColumns","handleClick","layout","viewport-stop","RegisterRenderer","first","last","number","customRenderer","ZingGrid","registerMethod","text","toUpperCase","renderer","App","Link","to","Route","exact","path","component","RegisterMethod","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById"],"mappings":"0SA0DeA,cArDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,UAAY,CACf,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGPP,EAAKQ,MAAQ,CAEXC,MAAO,WAGTT,EAAKU,kBAAoBV,EAAKU,kBAAkBC,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAbRA,mFAkBjBG,KAAKU,KAAKC,UAAUC,QAAQZ,KAAKI,qDAIjBS,GAChBb,KAAKc,SAAS,CAACR,MAAOO,EAAEE,OAAOC,yCAI/B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aACEC,IAAI,YACJC,QAAQ,cACRf,MAAON,KAAKK,MAAMC,OAClBW,EAAAC,EAAAC,cAAA,mBACEF,EAAAC,EAAAC,cAAA,aAAWG,MAAM,IAAIC,OAAO,aAC5BN,EAAAC,EAAAC,cAAA,aAAWG,MAAM,IAAIC,OAAO,aAC5BN,EAAAC,EAAAC,cAAA,aAAWG,MAAM,IAAIC,OAAO,eAIhCN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQH,MAAOhB,KAAKK,MAAMC,MAAOkB,SAAUxB,KAAKO,mBAC9CU,EAAAC,EAAAC,cAAA,UAAQH,MAAM,WAAd,WACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,WAAd,WACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,OAAd,OACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,QAAd,QACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,SAAd,kBAjDWS,aC4HNC,cA3Hb,SAAAA,EAAY9B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,IACjB7B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,KAAMJ,KACDS,MAAQ,CACXD,UAAW,CAET,CACE,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGP,CACE,CAAEuB,MAAS,YAAaC,KAAQ,UAChC,CAAED,MAAS,YAAaC,KAAQ,WAChC,CAAED,MAAS,MAAOC,KAAQ,SAC1B,CAAED,MAAS,QAASC,KAAQ,QAC5B,CAAED,MAAS,aAAcC,KAAQ,WAGrCC,SAAS,EACTC,YAAa,oBACbC,UAAW,EACXzB,MAAO,UACP0B,WAAY,IAGdnC,EAAKoC,OAAS,KACdpC,EAAKqC,KAAO,KAGZrC,EAAKsC,qBAAuBtC,EAAKsC,qBAAqB3B,KAA1BV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAC5BA,EAAKuC,kBAAoBvC,EAAKuC,kBAAkB5B,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACzBA,EAAKwC,oBAAsBxC,EAAKwC,oBAAoB7B,KAAzBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAC3BA,EAAKyC,iBAAmBzC,EAAKyC,iBAAiB9B,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACxBA,EAAKU,kBAAoBV,EAAKU,kBAAkBC,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAjCRA,mFAsCjBG,KAAKuC,wDAKLvC,KAAKc,SAAS,CAAEkB,WAAYQ,KAAKC,UAAUzC,KAAKK,MAAMD,UAAUJ,KAAKK,MAAM0B,yDAK3E,IAAIW,EAAe,EAEU,IAAzB1C,KAAKK,MAAM0B,YAAiBW,EAAe,GAE/C1C,KAAKc,SAAS,CAAEiB,UAAWW,IAC3B1C,KAAKuC,6DAIc1B,GACnBb,KAAKc,SAAS,CAAEkB,WAAYnB,EAAEE,OAAOC,kDAIrBH,GAChBb,KAAKc,SAAS,CAAEe,QAAShB,EAAEE,OAAO4B,sDAIhB9B,GAClBb,KAAKc,SAAS,CAAEgB,YAAajB,EAAEE,OAAOC,kDAItBH,GAChBb,KAAKc,SAAS,CAAER,MAAOO,EAAEE,OAAOC,yCAIhC,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aACEC,IAAI,aACJC,QAASrB,KAAKK,MAAMyB,YACpBc,KAAM5C,KAAKK,MAAM2B,WACjBa,MAAO7C,KAAKK,MAAMwB,QAClBvB,MAAON,KAAKK,MAAMC,MAClBwC,YAAU,IACVC,oBAAkB,iBAGpB9B,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,YAAUS,KAAK,KAAKoB,KAAK,KAAKC,KAAK,IACjCjC,MAAOhB,KAAKK,MAAM2B,WAAYR,SAAUxB,KAAKmC,uBAC/ClB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO+B,QAAQ,gBAAf,gBACAjC,EAAAC,EAAAC,cAAA,SAAOgC,GAAG,eAAeC,KAAK,WAC5BT,QAAS3C,KAAKK,MAAMwB,QAASL,SAAUxB,KAAKoC,oBAE9CnB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,UAAQgC,GAAG,QAAQE,QAASrD,KAAKsC,kBAAjC,mBACArB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO+B,QAAQ,gBAAf,kBACAjC,EAAAC,EAAAC,cAAA,SAAOgC,GAAG,eAAeC,KAAK,OAAOE,YAAY,UAC/CtC,MAAOhB,KAAKK,MAAMyB,YAAaN,SAAUxB,KAAKqC,sBAEhDpB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAO+B,QAAQ,cAAf,gBACAjC,EAAAC,EAAAC,cAAA,UAAQgC,GAAG,aAAYnC,MAAOhB,KAAKK,MAAMC,MAAOkB,SAAUxB,KAAKO,mBAC7DU,EAAAC,EAAAC,cAAA,UAAQH,MAAM,WAAd,WACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,WAAd,WACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,OAAd,OACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,QAAd,QACAC,EAAAC,EAAAC,cAAA,UAAQH,MAAM,SAAd,kBAtHgBS,qBCyHb8B,cAxHb,SAAAA,EAAY3D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuD,IACjB1D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyD,GAAApD,KAAAH,KAAMJ,KAGDS,MAAQ,CAEXD,UAAY,CACR,CAAEuB,MAAS,aAAcC,KAAQ,QACjC,CAAED,MAAS,YAAaC,KAAQ,QAChC,CAAED,MAAS,QAASC,KAAQ,WAC5B,CAAED,MAAS,aAAcC,KAAQ,SAGpCI,WAAY,IAIfnC,EAAK2D,iBAAmB3D,EAAK2D,iBAAiBhD,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAjBPA,mFAqBjBG,KAAKuC,gBAGLvC,KAAKU,KAAK+C,SAASC,iBAAiB,oBAAqB1D,KAAK2D,YAAYnD,KAAKR,OAE/EA,KAAKU,KAAK+C,SAASC,iBAAiB,kBAAmB1D,KAAK2D,YAAYnD,KAAKR,OAE7EA,KAAKU,KAAK+C,SAASC,iBAAiB,oBAAqB1D,KAAK4D,WAAWpD,KAAKR,OAE9EA,KAAKU,KAAK+C,SAASC,iBAAiB,oBAAqB1D,KAAK6D,WAAWrD,KAAKR,2CAIpEa,GACViD,QAAQC,IAAR,6BAA0ClD,EAAEmD,QAE5C,IAAIC,EAAWpD,EAAEmD,OAAOE,OAAOD,SAC3BE,EAAY,CACdxC,MAAOd,EAAEmD,OAAOE,OAAOtB,KAAKjB,MAC5BC,KAAMf,EAAEmD,OAAOE,OAAOtB,KAAKhB,MAOzBxB,EAASN,OAAAsE,EAAA,EAAAtE,CAAOE,KAAKK,MAAMD,WAC/BA,EAAU6D,GAAYE,EACtBnE,KAAKc,SAAS,CAACV,UAAWA,IAC1BJ,KAAKuC,mDAII1B,GACTiD,QAAQC,IAAR,4BAAyClD,EAAEmD,QAC3C,IAAIG,EAAY,CACdxC,MAAOd,EAAEmD,OAAOE,OAAOtB,KAAKjB,MAC5BC,KAAMf,EAAEmD,OAAOE,OAAOtB,KAAKhB,MAGzBxB,EAASN,OAAAsE,EAAA,EAAAtE,CAAOE,KAAKK,MAAMD,WAC/BA,EAAUiE,KAAKF,GACfnE,KAAKc,SAAS,CAACV,cACfJ,KAAKuC,mDAII1B,GACTiD,QAAQC,IAAR,4BAAyClD,GACzC,IAAIyD,EAAczD,EAAEmD,OAAOE,OAAOtB,KAAK2B,eAEnCnE,EAASN,OAAAsE,EAAA,EAAAtE,CAAOE,KAAKK,MAAMD,WAC/BA,EAAYA,EAAUoE,OAAO,SAACC,EAAKnD,GAAN,OAAgBA,GAASgD,IACtDtE,KAAKc,SAAS,CAACV,cACfJ,KAAKuC,wDAKLvC,KAAKc,SAAS,CAACkB,WAAWQ,KAAKC,UAAUzC,KAAKK,MAAMD,sDAOrCS,GAEfb,KAAKc,SAAS,CAACkB,WAAYnB,EAAEE,OAAOC,QAEpChB,KAAKc,SAAS,CAACV,UAAWoC,KAAKkC,MAAM7D,EAAEE,OAAOC,0CAI9C,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aACEC,IAAI,WACJC,QAAQ,uEACRsD,gBAAA,EACAC,QAAM,EACNC,mBAAA,EACAC,mBAAA,EACAC,QAAM,EACNC,QAAM,EACNnC,OAAK,EACLC,YAAU,IACVC,oBAAkB,SAClBH,KAAM5C,KAAKK,MAAM2B,WACjB1B,MAAON,KAAKK,MAAMC,QAEpBW,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,iDAAwCF,EAAAC,EAAAC,cAAA,iBAAxC,eACAF,EAAAC,EAAAC,cAAA,YAAUS,KAAK,KAAKoB,KAAK,KAAKC,KAAK,IAAIjC,MAAOhB,KAAKK,MAAM2B,WAAYR,SAAUxB,KAAKwD,2BApHhE/B,aCuCbwD,qBArCX,SAAAA,EAAYrF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiF,IACfpF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmF,GAAA9E,KAAAH,KAAMJ,KACDS,MAAQ,CACT6E,UAAMC,GAHKtF,wEAOV,IAAAuF,EAAApF,KACP,OACEiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aAAWC,IAAK,SAACc,GAAWkD,EAAKlD,KAAOA,GAAQU,KAAM5C,KAAKK,MAAM6E,KAC/D7D,QAAQ,QACRuD,QAAM,EACNS,SAAO,iDAMK,IAAAC,EAAAtF,KAElBuF,MAAM,gBACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIP,SAChBM,KACC,SAACE,GAECC,WAAW,WACTL,EAAKxE,SAAS,CACZoE,KAAM1C,KAAKC,UAAUiD,EAAOE,UAE7B,MAEL,SAACC,GAAY/B,QAAQC,IAAI8B,YAjChBpE,cCqEFqE,cArEb,SAAAA,EAAYlG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8F,IACjBjG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgG,GAAA3F,KAAAH,KAAMJ,KA+CRmG,YAAc,SAACC,GACXnG,EAAKiB,SAAS,CAAEV,UAAWoC,KAAKC,UAAU5C,EAAKqC,KAAKU,SA/CtD/C,EAAKQ,MAAQ,CACXD,UAAS,gOAOTyC,OAAO,EACPoD,WAAOd,EACPe,SAAU,GAGZrG,EAAKoC,OAAS,KACdpC,EAAKqC,KAAO,KACZrC,EAAKsG,SAAW,KAGhBtG,EAAKuG,SAAWvG,EAAKuG,SAAS5F,KAAdV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAChBA,EAAKwG,WAAaxG,EAAKwG,WAAW7F,KAAhBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAClBA,EAAKe,QAAUf,EAAKe,QAAQJ,KAAbV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAtBEA,wEAyBV,IAAAuF,EAAApF,KACP,OACEiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aAAWC,IAAK,SAACc,GAAWkD,EAAKlD,KAAOA,GAAQ0C,QAAM,EAAChC,KAAM5C,KAAKK,MAAMD,YACxEa,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAO+B,QAAQ,YAAf,SACAjC,EAAAC,EAAAC,cAAA,SAAOgC,GAAG,WAAWC,KAAK,WAAWT,QAAS3C,KAAKK,MAAMwC,MAAOrB,SAAUxB,KAAKoG,WAC/EnF,EAAAC,EAAAC,cAAA,SAAOC,IAAK,SAACkF,GAAYlB,EAAKnD,OAASqE,GAASlD,KAAK,OAAOE,YAAY,YACxErC,EAAAC,EAAAC,cAAA,UAAQkC,QAASrD,KAAKqG,YAAtB,eAAsDpF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAC3DF,EAAAC,EAAAC,cAAA,YAAUC,IAAK,SAACmF,GAASnB,EAAKe,SAAWI,GAAM3E,KAAK,KAAKoB,KAAK,KAAKC,KAAK,MACxEhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQgC,GAAG,QAAQE,QAASrD,KAAKY,SAAjC,yDAQFZ,KAAKmG,SAASnF,MAAQhB,KAAKK,MAAMD,4CASnCJ,KAAKkC,KAAKtB,QAAQ4B,KAAKkC,MAAM1E,KAAKmG,SAASnF,2CAM3ChB,KAAKkC,KAAKkE,UAAUpG,KAAKK,MAAMwC,OAC/B7C,KAAKc,SAAS,CAAE+B,OAAQ7C,KAAKK,MAAMwC,6CAInC7C,KAAKkC,KAAKmE,WAAWrG,KAAKiC,OAAOjB,OACjChB,KAAKc,SAAS,CAAEmF,MAAOjG,KAAKiC,OAAOjB,eAlEnBS,aCoDP+E,cAnDX,SAAAA,EAAY5G,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwG,IACf3G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0G,GAAArG,KAAAH,KAAMJ,KAkCVmG,YAAc,SAACC,GACPA,EAAMhC,OAAOyC,UAAYT,EAAMhC,OAAOE,QACtCrE,EAAK6G,WAAL,GAAAC,OAAqBX,EAAM5C,KAA3B,UAAAuD,OAAwCX,EAAMhC,OAAOyC,SAASG,UAA9D,QACA/G,EAAK6G,WAAL,GAAAC,OAAqBnE,KAAKC,UAAUuD,EAAMhC,OAAOE,QAAjD,aACS8B,EAAMhC,OAAOE,QACtBrE,EAAK6G,WAAL,GAAAC,OAAqBX,EAAM5C,KAA3B,wBACAvD,EAAK6G,WAAL,GAAAC,OAAqBnE,KAAKC,UAAUuD,EAAMhC,OAAOE,QAAjD,cAEAJ,QAAQC,IAAIiC,EAAM5C,KAAO,mBACzBvD,EAAK6G,WAAL,GAAAC,OAAqBX,EAAM5C,KAA3B,6BAEFvD,EAAKgH,SAASC,UAAYjH,EAAK6G,WA5CjC7G,EAAKqC,KAAO,KACZrC,EAAKgH,SAAW,KAChBhH,EAAK6G,UAAY,GAJF7G,wEAOV,IAAAuF,EAAApF,KACP,OACEiB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aAAWC,IAAK,SAACc,GAAWkD,EAAKlD,KAAOA,GAAQiB,GAAG,YAAY9B,QAAQ,SAASwB,OAAK,EAACC,YAAU,MAAgB7B,EAAAC,EAAAC,cAAA,WAEhHF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKC,IAAK,SAACyF,GAAezB,EAAKyB,SAAWA,GAAY1D,GAAG,WAAW4D,UAAU,0DAMlF/G,KAAKkC,KAAKU,KAAV,qRAUA,IADA,IAAIoE,EAAS,CAAC,aAAc,aAAc,eAAgB,mBACjDC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IAC/BjH,KAAKkC,KAAKwB,iBAAiBsD,EAAOC,GAAIjH,KAAK+F,YAAYvF,KAAKR,cA/BnDyB,aC8FN0F,cA5Fb,SAAAA,EAAYvH,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmH,IACjBtH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqH,GAAAhH,KAAAH,KAAMJ,KACDS,MAAQ,CACX6E,UAAMC,EACNiC,WAAOjC,EACPkC,gBAAgB,GAElBxH,EAAKyH,YAAczH,EAAKyH,YAAY9G,KAAjBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAPFA,6EAYjBG,KAAKc,SAAS,CACZuG,gBAAiBrH,KAAKK,MAAMgH,kDAIvB,IAAAjC,EAAApF,KACP,OACEiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uCAC6BF,EAAAC,EAAAC,cAAA,yBAD7B,gPAOAF,EAAAC,EAAAC,cAAA,UAAQkC,QAASrD,KAAKsH,aAAtB,SAEGtH,KAAKK,MAAMgH,eAAiB,WAAa,UAF5C,WAKApG,EAAAC,EAAAC,cAAA,aACEC,IAAK,SAAAc,GACHkD,EAAKlD,KAAOA,GAEdU,KAAM5C,KAAKK,MAAMgH,eAAiBrH,KAAKK,MAAM6E,KAAOlF,KAAKK,MAAM+G,MAC/D/F,QAASrB,KAAKK,MAAMgH,eAAiB,QAAU,UAC/CzC,QAAM,EACNS,SAAO,EACPkC,OAAO,MACPC,iBAAA,GAECxH,KAAKK,MAAMgH,eACVpG,EAAAC,EAAAC,cAAA,mBACEF,EAAAC,EAAAC,cAAA,aAAWG,MAAM,UACjBL,EAAAC,EAAAC,cAAA,aAAWG,MAAM,WAGnBL,EAAAC,EAAAC,cAAA,mBACEF,EAAAC,EAAAC,cAAA,aAAWG,MAAM,iBACjBL,EAAAC,EAAAC,cAAA,aAAWG,MAAM,gEAQT,IAAAgE,EAAAtF,KAElBuF,MAAM,gBACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIP,SAChBM,KACC,SAAAE,GAEEC,WAAW,WACTL,EAAKxE,SAAS,CACZoE,KAAM1C,KAAKC,UAAUiD,EAAOE,UAE7B,MAEL,SAAAC,GACE/B,QAAQC,IAAI8B,KAIlBN,MAAM,iBACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIP,SAChBM,KACC,SAAAE,GAEEJ,EAAKxE,SAAS,CACZsG,MAAO5E,KAAKC,UAAUiD,EAAOE,UAGjC,SAAAC,GACE/B,QAAQC,IAAI8B,YAxFapE,aC2CpBgG,cA1CX,SAAAA,EAAY7H,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyH,IACjB5H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2H,GAAAtH,KAAAH,KAAMJ,KAEDQ,UAAY,CACf,CAAEsH,MAAS,QAASC,KAAQ,OAAQC,OAAU,KAC9C,CAAEF,MAAS,QAASC,KAAQ,QAASC,OAAU,KAC/C,CAAEF,MAAS,WAAYC,KAAQ,OAAQC,OAAU,MAInD/H,EAAKgI,eAAiBhI,EAAKgI,eAAerH,KAApBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAVLA,mFAejBG,KAAKU,KAAKC,UAAUC,QAAQZ,KAAKI,WAGjC0H,IAASC,eAAe/H,KAAK6H,eAAgB,yDAIhCG,GACb,OAAOA,EAAKC,+CAIZ,OACEhH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aACEC,IAAI,YACJC,QAAQ,eACRJ,EAAAC,EAAAC,cAAA,mBACEF,EAAAC,EAAAC,cAAA,aAAWG,MAAM,QAAQC,OAAO,WAAW2G,SAAS,mBACpDjH,EAAAC,EAAAC,cAAA,aAAWG,MAAM,OAAOC,OAAO,aAC/BN,EAAAC,EAAAC,cAAA,aAAWG,MAAM,SAASC,OAAO,uBArChBE,6BCuChB0G,mLA5BX,OACElH,EAAAC,EAAAC,cAAA,OAAK4F,UAAU,OACb9F,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAMC,GAAG,aAAT,aACApH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAMC,GAAG,oBAAT,mBACApH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAMC,GAAG,oBAAT,mBACApH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAMC,GAAG,0BAAT,yBACApH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAMC,GAAG,oBAAT,mBACApH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAMC,GAAG,SAAT,QACApH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAMC,GAAG,YAAT,WACApH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAMC,GAAG,WAAT,WAGJpH,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9I,IACjCsB,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAW9I,IACnCsB,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAOE,KAAK,mBAAmBC,UAAW/G,IAC1CT,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAOE,KAAK,mBAAmBC,UAAWlF,IAC1CtC,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAOE,KAAK,yBAAyBC,UAAWtB,IAChDlG,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAOE,KAAK,mBAAmBC,UAAWC,IAC1CzH,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWxD,IAC/BhE,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAW3C,IAClC7E,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWjC,YAvBvB/E,qBCLlBkH,IAASC,OAAQ3H,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,KAAe5H,EAAAC,EAAAC,cAAC2H,EAAD,OAAyBC,SAASC,eAAe","file":"static/js/main.087d4576.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ZingGrid from 'zinggrid';\n\nclass ReadOnly extends Component {\n\n    constructor(props) {\n      super(props);\n      // define variables\n      this.datastore = [\n        [1,2,3], \n        [4,5,6]\n      ];\n      // define state data\n      this.state = {\n        // model for binding theme attribute grid\n        theme: 'default',\n      };\n      // define event handlers\n      this.handleThemeChange = this.handleThemeChange.bind(this);\n    }\n\n    // assign data on mount\n    componentDidMount() {\n      this.refs.firstGrid.setData(this.datastore);\n    }\n\n    // toggle theme attribute on grid\n    handleThemeChange(e) {\n      this.setState({theme: e.target.value});\n    }\n\n    render() {\n      return (\n        <div>\n          <zing-grid\n            ref=\"firstGrid\"\n            caption=\"Hello World\"\n            theme={this.state.theme}>\n            <zg-colgroup>\n              <zg-column index=\"0\" header=\"Column 1\"></zg-column>\n              <zg-column index=\"1\" header=\"Column 2\"></zg-column>\n              <zg-column index=\"2\" header=\"Column 3\"></zg-column>\n            </zg-colgroup>\n          </zing-grid>\n      \n          <br></br>\n          <hr></hr>\n          <select value={this.state.theme} onChange={this.handleThemeChange}>\n            <option value=\"default\">Default</option>\n            <option value=\"android\">Android</option>\n            <option value=\"ios\">IOS</option>\n            <option value=\"dark\">Dark</option>\n            <option value=\"black\">Black</option>\n          </select>\n        </div>\n      )\n    }\n  }\nexport default ReadOnly;","import React, { Component } from 'react';\nimport ZingGrid from 'zinggrid';\n\nclass OneWayBinding extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        datastore: [\n          // dataset 1\n          [\n            [1,2,3], \n            [4,5,6]\n          ],\n          // dataset 2\n          [\n            { \"breed\": \"Chow Chow\", \"name\": \"Butter\"},\n            { \"breed\": \"Dachshund\", \"name\": \"Sousage\"},\n            { \"breed\": \"Pug\", \"name\": \"Potat\"},\n            { \"breed\": \"Corgi\", \"name\": \"Plop\"},\n            { \"breed\": \"Pomeranian\", \"name\": \"Floof\"}\n          ]\n        ],\n        pagerOn: true,\n        captionText: 'Change Me Please!',\n        dataIndex: 1,\n        theme: 'default',\n        stringData: ''\n      };\n      \n      this.cInput = null;\n      this.grid = null;\n  \n      // define event handlers\n      this.handleTextareaChange = this.handleTextareaChange.bind(this);\n      this.handlePagerChange = this.handlePagerChange.bind(this);\n      this.handleCaptionChange = this.handleCaptionChange.bind(this);\n      this.handleChangeData = this.handleChangeData.bind(this);\n      this.handleThemeChange = this.handleThemeChange.bind(this);\n    }\n  \n    // assign data on load\n    componentDidMount() {\n      this.stringifyData();\n    }\n\n    // method to stringify data for grid\n    stringifyData() {\n      this.setState({ stringData: JSON.stringify(this.state.datastore[this.state.dataIndex]) });\n    }\n\n    // handle toggling of datasets\n    handleChangeData() {\n      let newDataIndex = 0;\n      // toggle dataset variable and trigger watch change for grid data\n      if (this.state.dataIndex === 0) newDataIndex = 1;\n\n      this.setState({ dataIndex: newDataIndex });\n      this.stringifyData(); \n    }\n\n    // handling textarea manipulation of data\n    handleTextareaChange(e) {\n      this.setState({ stringData: e.target.value });\n    }\n\n    // handle toggling of pager\n    handlePagerChange(e) {\n      this.setState({ pagerOn: e.target.checked });\n    }\n\n    // handle caption change\n    handleCaptionChange(e) {\n      this.setState({ captionText: e.target.value });\n    }\n\n    // handle toggling of theme attribute on grid\n    handleThemeChange(e) {\n      this.setState({ theme: e.target.value });\n    }\n\n    render() {\n      return ( \n        <div>\n          <zing-grid\n            ref=\"oneWayGrid\"\n            caption={this.state.captionText}\n            data={this.state.stringData}\n            pager={this.state.pagerOn}\n            theme={this.state.theme}\n            page-size=\"5\"\n            page-size-options=\"2,5,15,25,50\">\n          </zing-grid>\n\n          <br></br>\n\n          <h3>Stored Data</h3>\n          <p>Paste your JSON data here</p>\n          <textarea name=\"ds\" cols=\"50\" rows=\"8\" \n            value={this.state.stringData} onChange={this.handleTextareaChange}></textarea>\n          <br></br>\n\n          <label htmlFor=\"pager-toggle\">Toggle Pager</label>\n          <input id=\"pager-toggle\" type=\"checkbox\" \n            checked={this.state.pagerOn} onChange={this.handlePagerChange}></input>\n\n          <br></br>\n          <label>Change Data</label>\n          <button id=\"cdBtn\" onClick={this.handleChangeData}>Toggle Datasets</button>\n          <br></br>\n\n          <label htmlFor=\"caption-text\">Change Caption</label>\n          <input id=\"caption-text\" type=\"text\" placeholder=\"Caption\" \n            value={this.state.captionText} onChange={this.handleCaptionChange}></input>\n\n          <br></br>\n          <label htmlFor=\"theme-text\">Change Theme</label>\n          <select id=\"theme-text\"value={this.state.theme} onChange={this.handleThemeChange}>\n            <option value=\"default\">Default</option>\n            <option value=\"android\">Android</option>\n            <option value=\"ios\">IOS</option>\n            <option value=\"dark\">Dark</option>\n            <option value=\"black\">Black</option>\n          </select>\n        </div>   \n      )\n    }\n  }\n  export default OneWayBinding;","import React, { Component } from 'react';\nimport ZingGrid from 'zinggrid';\n\nclass TwoWayBinding extends Component {\n  constructor(props) {\n    super(props);\n    \n    // define data\n    this.state = {\n      // fake datastore\n      datastore : [\n          { \"breed\": \"Cane Corso\", \"name\": \"Ziva\"},\n          { \"breed\": \"Dachshund\", \"name\": \"Rick\"},\n          { \"breed\": \"Corgi\", \"name\": \"Phillis\"},\n          { \"breed\": \"Pomeranian\", \"name\": \"Koda\"}\n      ],\n      // model for binding data attribute to grid\n       stringData: '',\n    };\n    \n    // define event handlers\n    this.handleDataChange = this.handleDataChange.bind(this);\n  }\n  \n  componentDidMount() {\n    this.stringifyData();\n    // assign editor callback to catch data updates\n    // full row edit \n    this.refs.demoGrid.addEventListener('data:recordchange', this.dataChanged.bind(this));\n    // single cell change (double click cell)\n    this.refs.demoGrid.addEventListener('data:cellchange', this.dataChanged.bind(this));\n    // row insert\n    this.refs.demoGrid.addEventListener('data:recordinsert', this.dataInsert.bind(this));\n    // row delete\n    this.refs.demoGrid.addEventListener('data:recorddelete', this.dataDelete.bind(this));\n  }\n   \n   // manager store updates\n  dataChanged(e) {\n    console.log(`--- data:changed fired ---`, e.detail);\n\n    let rowIndex = e.detail.ZGData.rowIndex;\n    let newValues = {\n      breed: e.detail.ZGData.data.breed,\n      name: e.detail.ZGData.data.name\n    };\n\n    // update the object in datastore at the correct\n    // array position\n    // eg) currentDataSet['name'] = 'new value'\n    // let datastore = JSON.parse(JSON.stringify( this.state.datastore));\n    let datastore = [...this.state.datastore];\n    datastore[rowIndex] = newValues;\n    this.setState({datastore: datastore});\n    this.stringifyData();\n  }\n\n  // manage inserting rows to store\n  dataInsert(e) {        \n    console.log(`--- data:insert fired ---`, e.detail);\n    let newValues = {\n      breed: e.detail.ZGData.data.breed,\n      name: e.detail.ZGData.data.name,\n    };\n    // push record to our array\n    let datastore = [...this.state.datastore];\n    datastore.push(newValues);\n    this.setState({datastore});\n    this.stringifyData();\n  }\n\n  // manage deleting rows to store\n  dataDelete(e) {        \n    console.log(`--- data:delete fired ---`, e);\n    let recordIndex = e.detail.ZGData.data.nOriginalIndex;\n    // filter deleted row from datastore containing array of objects\n    let datastore = [...this.state.datastore];\n    datastore = datastore.filter((ele, index) => index != recordIndex);\n    this.setState({datastore});\n    this.stringifyData();\n  }\n\n  // update store data for textarea input and grid\n  stringifyData() {\n    this.setState({stringData:JSON.stringify(this.state.datastore)});\n    // alternatively can use API to set data. We chose\n    // to show off attribute binding first\n    // this.$refs.demoGrid.setData(this.datastore);\n  }\n  \n  // handle textarea data changes\n  handleDataChange(e) {\n    // update state for input\n    this.setState({stringData: e.target.value});\n    // update store\n    this.setState({datastore: JSON.parse(e.target.value)});\n  }\n  \n  render() {\n    return (\n      <div>\n        <zing-grid\n          ref=\"demoGrid\"\n          caption=\"Two Way Data Binding (right click on cells for context menu options)\"\n          context-menu\n          editor\n          editor-controls\n          layout-controls\n          search\n          sorter\n          pager\n          page-size=\"5\"\n          page-size-options=\"2,5,15\"\n          data={this.state.stringData}\n          theme={this.state.theme}>\n        </zing-grid>\n        <br></br>\n        <h3>Edit Store Data</h3>\n        <p>Edit current JSON or copy paste your <b>JSON</b> data here:</p>\n        <textarea name=\"ds\" cols=\"50\" rows=\"8\" value={this.state.stringData} onChange={this.handleDataChange}></textarea>\n      </div>\n    );\n  }\n}\nexport default TwoWayBinding;","import React, { Component } from 'react';\nimport './css/Ajax.css';\nimport ZingGrid from 'zinggrid';\n\nclass Ajax extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            json: undefined\n        }\n    }\n    \n    render() {\n      return (\n        <div>\n          <zing-grid ref={(grid) => { this.grid = grid }} data={this.state.json} \n            caption=\"Shows\" \n            editor\n            loading>\n          </zing-grid>\n        </div>\n      )\n    }\n\n    componentDidMount() {\n      const _this = this;\n      fetch('./shows.json')\n        .then(res => res.json())\n        .then(\n          (result) => {\n            // purposely timeout so the loading screen displays longer\n            setTimeout(() => {\n              this.setState({\n                json: JSON.stringify(result.shows)\n              })\n            }, 2000);\n          },\n          (error) => { console.log(error)}\n        )\n    }\n\n  }\nexport default Ajax;","import React, { Component } from 'react';\nimport ZingGrid from 'zinggrid';\n\nclass Methods extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        datastore: `[\n  { \"breed\": \"Chow Chow\", \"name\": \"Butter\"},\n  { \"breed\": \"Dachshund\", \"name\": \"Sousage\"},\n  { \"breed\": \"Pug\", \"name\": \"Potat\"},\n  { \"breed\": \"Corgi\", \"name\": \"Plop\"},\n  { \"breed\": \"Pomeranian\", \"name\": \"Floof\"}\n]`,\n        pager: false,\n        cText: undefined,\n        selected: 0\n      }\n      \n      this.cInput = null;\n      this.grid = null;\n      this.textarea = null;\n      \n  \n      this.setPager = this.setPager.bind(this);\n      this.setCaption = this.setCaption.bind(this);\n      this.setData = this.setData.bind(this);\n    }\n  \n    render() {\n      return ( \n        <div>\n          <zing-grid ref={(grid) => { this.grid = grid }} editor data={this.state.datastore} ></zing-grid>\n          <br/>\n          <label htmlFor=\"pagerBox\">Pager</label>\n          <input id=\"pagerBox\" type=\"checkbox\" checked={this.state.pager} onChange={this.setPager} />\n          <input ref={(input) => { this.cInput = input }} type=\"text\" placeholder=\"Caption\"/>\n          <button onClick={this.setCaption}>Set Caption</button><br/><br/>\n          <textarea ref={(ta) => { this.textarea = ta }} name=\"ds\" cols=\"50\" rows=\"8\"></textarea>\n          <br/>\n          <button id=\"cdBtn\" onClick={this.setData}>Set Data</button>\n          \n          \n        </div>   \n      )\n    }\n\n    componentDidMount() {\n        this.textarea.value = this.state.datastore;\n       \n    }\n\n    handleEvent = (event) => { // changes to grid data will change data store\n        this.setState({ datastore: JSON.stringify(this.grid.data) });\n    }\n  \n    setData() {\n      this.grid.setData(JSON.parse(this.textarea.value));\n    }\n  \n\n  \n    setPager() {\n      this.grid.setPager(!this.state.pager);\n      this.setState({ pager: !this.state.pager });\n    }\n  \n    setCaption() {\n      this.grid.setCaption(this.cInput.value);\n      this.setState({ cText: this.cInput.value });\n      \n    }\n  }\n  export default Methods;","import React, { Component } from 'react';\nimport ZingGrid from 'zinggrid';\n\nclass Events extends Component {\n    constructor(props) {\n        super(props);\n        this.grid = null; \n        this.eventLog = null; \n        this.eventText = \"\";\n    }\n    \n    render() {\n      return (\n        <div>\n            <zing-grid ref={(grid) => { this.grid = grid }} id=\"eventGrid\" caption=\"Events\" pager page-size=\"3\"></zing-grid><br />\n    \n            <h3>Event Log</h3>\n            <div ref={(eventLog) => { this.eventLog = eventLog }} id=\"eventLog\" className=\"wordwrap\"></div>\n        </div>\n      )\n    }\n\n    componentDidMount() {\n        this.grid.data = `[\n            {\"name\": \"Kevin\", \"age\": \"22\"},\n            {\"name\": \"Joe\", \"age\": \"40\"},\n            {\"name\": \"Liz\", \"age\": \"25\"},\n            {\"name\": \"Tim\", \"age\": \"24\"},\n            {\"name\": \"Ron\", \"age\": \"30\"},\n            {\"name\": \"Jane\", \"age\": \"31\"}\n          ]`;\n          \n        let events = ['grid:ready', 'cell:click', 'header:click', 'grid:pagechange'];\n        for (var i = 0; i < events.length; i++) {\n            this.grid.addEventListener(events[i], this.handleEvent.bind(this));\n        }\n       \n    }\n\n    handleEvent = (event) => {\n        if (event.detail.ZGTarget && event.detail.ZGData) {\n            this.eventText += `${event.type} from ${event.detail.ZGTarget.localName}<br>`;\n            this.eventText += `${JSON.stringify(event.detail.ZGData)}<br><br>`;\n          } else if (event.detail.ZGData) {\n            this.eventText += `${event.type} from zing-grid <br>`;\n            this.eventText += `${JSON.stringify(event.detail.ZGData)}<br><br>`;\n          } else {\n            console.log(event.type + ' from zing-grid');\n            this.eventText += `${event.type} from zing-grid <br><br>`;\n          }\n          this.eventLog.innerHTML = this.eventText;\n        }\n  }\n\n    \nexport default Events;","import React, { Component } from \"react\";\nimport \"./css/Ajax.css\";\nimport ZingGrid from \"zinggrid\";\n\nclass ConditionalRendering extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      json: undefined,\n      json2: undefined,\n      defaultColumns: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  // toggle datasets\n  handleClick() {\n    this.setState({\n      defaultColumns: !this.state.defaultColumns\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <p>\n          You can dynamically render <code>zg-column</code>s in your code and\n          ZingGrid will automatically pick up the mutation and adjust the layout\n          of columns being displayed. This is good for adjusting a single grid\n          with multiple datasets. If you have a new dataset, you will want new\n          columns.\n        </p>\n        <button onClick={this.handleClick}>\n          Toggle\n          {this.state.defaultColumns ? \" Second \" : \" First \"}\n          Dataset\n        </button>\n        <zing-grid\n          ref={grid => {\n            this.grid = grid;\n          }}\n          data={this.state.defaultColumns ? this.state.json : this.state.json2}\n          caption={this.state.defaultColumns ? \"Shows\" : \"Shows 2\"}\n          editor\n          loading\n          layout=\"row\"\n          viewport-stop\n        >\n          {this.state.defaultColumns ? (\n            <zg-colgroup>\n              <zg-column index=\"title\" />\n              <zg-column index=\"genre\" />\n            </zg-colgroup>\n          ) : (\n            <zg-colgroup>\n              <zg-column index=\"titleChanged\" />\n              <zg-column index=\"genreChanged\" />\n            </zg-colgroup>\n          )}\n        </zing-grid>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    // fetch the default dataset\n    fetch(\"./shows.json\")\n      .then(res => res.json())\n      .then(\n        result => {\n          // purposely timeout so the loading screen displays longer\n          setTimeout(() => {\n            this.setState({\n              json: JSON.stringify(result.shows)\n            });\n          }, 2000);\n        },\n        error => {\n          console.log(error);\n        }\n      );\n    // fetch second set\n    fetch(\"./shows2.json\")\n      .then(res => res.json())\n      .then(\n        result => {\n          // purposely timeout so the loading screen displays longer\n          this.setState({\n            json2: JSON.stringify(result.shows)\n          });\n        },\n        error => {\n          console.log(error);\n        }\n      );\n  }\n}\nexport default ConditionalRendering;\n","import React, { Component } from 'react';\nimport ZingGrid from 'zinggrid';\n\nclass RegisterRenderer extends Component {\n\n    constructor(props) {\n      super(props);\n      // define variables\n      this.datastore = [\n        { \"first\": \"Maria\", \"last\": \"John\", \"number\": 123 },\n        { \"first\": \"David\", \"last\": \"Smith\", \"number\": 456 },\n        { \"first\": \"Felicity\", \"last\": \"Snow\", \"number\": 789 }\n      ];\n      \n      // define method\n      this.customRenderer = this.customRenderer.bind(this);\n    }\n\n    // assign data on mount\n    componentDidMount() {\n      this.refs.firstGrid.setData(this.datastore);\n\n      // Register method\n      ZingGrid.registerMethod(this.customRenderer, 'customRenderer');\n    }\n\n    // toggle theme attribute on grid\n    customRenderer(text) {\n      return text.toUpperCase();\n    }\n\n    render() {\n      return (\n        <div>\n          <zing-grid\n            ref=\"firstGrid\"\n            caption=\"Hello World\">\n            <zg-colgroup>\n              <zg-column index=\"first\" header=\"Column 1\" renderer=\"customRenderer\"></zg-column>\n              <zg-column index=\"last\" header=\"Column 2\"></zg-column>\n              <zg-column index=\"number\" header=\"Column 3\"></zg-column>\n            </zg-colgroup>\n          </zing-grid>\n        </div>\n      )\n    }\n  }\nexport default RegisterRenderer;","import React, { Component } from 'react';\nimport './App.css';\nimport ReadOnly from './components/ReadOnly';\nimport OneWayBinding from './components/OneWayBinding';\nimport TwoWayBinding from './components/TwoWayBinding';\nimport Ajax from './components/Ajax';\nimport Methods from './components/Methods';\nimport Events from './components/Events';\nimport ConditionalRendering from './components/ConditionalRendering';\nimport RegisterMethod from './components/Registermethod';\nimport { Switch, Route, Link } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <nav>\n            <Link to=\"/readonly\">Read-Only</Link>\n            <Link to=\"/one-way-binding\">One-Way Binding</Link>\n            <Link to=\"/two-way-binding\">Two-Way Binding</Link>\n            <Link to=\"/conditional-rendering\">Conditional Rendering</Link>\n            <Link to=\"/register-method\">Register Method</Link>\n            <Link to=\"/ajax\">Ajax</Link>\n            <Link to=\"/methods\">Methods</Link>\n            <Link to=\"/events\">Events</Link>\n        </nav>\n        \n        <Route exact path='/' component={ReadOnly}/>\n        <Route path='/readonly' component={ReadOnly}/>\n        <Route path='/one-way-binding' component={OneWayBinding}/>\n        <Route path='/two-way-binding' component={TwoWayBinding}/>\n        <Route path='/conditional-rendering' component={ConditionalRendering}/>\n        <Route path='/register-method' component={RegisterMethod}/>\n        <Route path='/ajax' component={Ajax}/>\n        <Route path='/methods' component={Methods}/>\n        <Route path='/events' component={Events}/>\n  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render((<BrowserRouter><App/></BrowserRouter>), document.getElementById('root'));\n\n"],"sourceRoot":""}